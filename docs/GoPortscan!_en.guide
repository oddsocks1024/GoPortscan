@database GoPortscan!.guide
@Width 90

@Node Main "GoPortscan!.guide"

                            
                 _____       ___           __                    __
                / ___/__    / _ \\___  ____/ /____ _______ ____  / /
               / (_ / _ \\  / ___/ _ \\/ __/ __(_-</ __/ _ `/ _ \\/_/
               \\___/\\___/ /_/   \\___/_/  \\__/___/\\__/\\_,_/_//_(_)
                                                    
                              Describes Version 1.1
                                 by Ian Chapman
                         ian.chapman@bleach.demon.co.uk

                         http://software.scm.tees.ac.uk
                      http://software.electric-dreams.org

                            @{" Disclaimer            " Link "Disclaimer"}
                            @{" Introduction          " Link "Introduction"}

                            @{" Main Window           " Link "Main Window"}
                            @{"     Portscan          " Link "Portscan_Page"}
                            @{"     Traceroute        " Link "Traceroute_Page"}
                            @{"     Ping Sweep        " Link "Pingsweep_Page"}
                            @{"     Other             " Link "Other_Page"}
                            @{" Preferences Window    " Link "Preferences Window"}
                            @{" Bookmarks Window      " Link "Bookmarks Window"}
                            @{" Service Lookup Window " Link "Service Lookup Window"}
                            @{" Helper Window         " Link "Helper Window"}
                            @{" Menus                 " Link "Menus"}
                            @{" AREXX                 " Link "Arexx"}

                            @{" Services Table        " Link "Services Table"}
                            @{" Scan Types Explained  " Link "Scan Types"}
                            @{" Trojans               " Link "Trojans"}
                            @{" History               " Link "History"}
                            @{" To Do                 " Link "To Do"}

                            @{" Contact & Bug Reports " Link "Contact"}

                        Hungarian Catalog by Marton Dosa
                         Various Icons by Luca Longone
                          Beta Testing by Todd Oberly

@endnode

@node "Disclaimer" "Disclaimer"

                                   DISCLAIMER
                                   ==========

Use of this software is entirely at your own risk. You accept any consequences
whatsoever as a result of using this software, whether intentional or
accidental. This includes, but is not limited to, damage to hardware, software or
legal actions taken as a direct or indirect result of using this software. The
author does not support the use of this software as part of a hacking attempt,
either to gain unauthorised access to a system or as an aid in a denial of
service attack. There is no warranty, either expressed or implied.

It is worth noting that simply portscanning a machine on which you do not have
authorisation to do so, is illegal in some jurisdictions.


@endnode

@node "Introduction" "Introduction"

                                  INTRODUCTION
                                  ============

Go Portscan! is a TCP/UDP portscanner (and more) with a graphical user interface
(very few seem to have them) which scans all or a specified number of ports on a
machine to see which ports are open.  Ports are used by networking software
as the end points of communication to differentiate the specific application
they wish to talk to. A portscanner can be a useful tool in helping to keep a
system secure from unwanted visitors. Open ports are a security risk, especially
if you use your system on the internet and you're not running a firewall. Even
if you do use a firewall, closing unnecessary ports is good practice. Go
Portscan! helps you indentify which ports are open on both your local machine
and any machine on your network or the internet. You may just be suprised to
find which ports are open on your machines!

Features
--------

* Graphical User Interface (MUI).
* Localisation support.
* Supports both TCP and UDP port scans with highly flexible port selections.
* Optional output logging from open ports.
* Optional wakeup sending.
* Configurable timeout and delay.
* Service and Trojan lookup table (approx 3500 entries) with support for using the
  stacks own service table.
* Optional trojan lookup.
* User lookup of service by port number or keyword (both case sensitive and
  insensitive).
* Host bookmarks.
* Telnet/FTP/HTTP to open ports.
* Host resolving facility with support for reverse lookups.
* Ping facility with broadcast support.
* Ping Sweep facility with optional DNS lookup and ICMP message reporting.
* UDP "Ping" Support
* Traceroute with support for both UDP and ICMP types with optional DNS lookup and
  configurable hops.
* Extensive documentation and bubble help.
* Scans approximately TCP 170 ports/sec
  (Based on 060@50Mhz, 10Base2 Connection, Ping Time 2.7ms)


@endnode

@node "Main Window" "Main Window"

                                  MAIN WINDOW
                                  ===========

@{b}Host@{ub}
----

Enter the hostname or IP address of the machine you wish to contact. The
machine can be the same as the one Go Portscan! is running on (localhost) or a
machine on your network or the internet. 

@{b}Bookmark Button (popup icon)@{ub}
---------------------------

Opens the @{"Bookmarks Window" Link "Bookmarks Window"}. The bookmarks window can be used for storing your
preferred hosts.


                            @{" Portscan   " Link "Portscan_Page"}
                            @{" Traceroute " Link "Traceroute_Page"}
                            @{" Ping Sweep " Link "Pingsweep_Page"}
                            @{" Other      " Link "Other_Page"}

@{b}Status@{ub}
------

Status attempts to give the user some feedback on what Go Portscan! is doing,
such as the port it is scanning or the host it is pinging.

@{b}Speed Slider@{ub}
------------

The speed slider allows the user to set a delay in seconds. This may be useful
to stop Go Portscan! from using too much bandwidth on a slow connection or to
help avoid triggering remote security software.

@{b}Write to Log (Disk Icon)@{ub}
------------------------

Forces Go Portscan! to write the contents of the listview to the log file.
Please note however, that Portscans are automatically written to the log file.


@{b}Output Listview@{ub}
---------------

Displays any scanning results and general output. Double clicking on any entry
in the listview will open the @{"Helper Window" Link "Helper Window"}


@{b}ABORT@{ub}
-----

This button will become active during any operation where it may be used. It
will attempt to abort the current operation at the earliest opportunity.

@endnode

@node "Portscan_Page" "Portscan_Page"

                                    PORTSCAN
                                    ========

@{b}Ports@{ub}
-----

Enter the list of ports which you wish to scan. Port numbers are comma
serparated and ranges of ports can also be specified. Multiple ranges can also
be specified by comma separating them. For example:-

                           7,9,20,200-500,501,700-800

This means, scan port 7, 9, 20, all ports from 200-500 inclusive, port 501 and
all ports from 700 to 800 inclusive. 

@{b}Add user-defined range (arrow icon)@{ub}
-----------------------------------

This will add the port range as a pre-defined range that will appear in the
cycle gadget, once Go Portscan! is restarted. A window will open to ask you to
enter a descriptive name for the range. You are currently limited to 20
user-defined ranges because. At the moment, if you need to remove any user-defined
ranges then you must edit the file "ENVARC:goportscan.ranges" with a text editor.

@{b}Range@{ub}
-----

This is a drop down box which simply has some pre-defined port ranges which will
be entered into the ports box when selected. It will also show any user-defined
ranges. 

        Common : A list of ports which are commonly open on many systems
        Well Known: Ports 0 -1023
        Registered: Ports 1024-49151
        ALL : Ports 0-65535

@{b}Service Lookup@{ub}
--------------

If this option is selected, then Go Portscan! will perform a service lookup on
open ports and display it in the output listview. A service lookup basically
looks at a table of services and determines which ones often run on that port
number and displays them. It also displays any trojans that it knows also run
on that port, if you have the 'Show Trojans' checkmark selected.

@{u}PLEASE NOTE: ANY RESULT OF A SERVICE LOOKUP IS PURELY A SUGGESTION OF WHAT
IS RUNNING ON THAT PORT BASED UPON PORTLISTS FROM THE IANA AND SEVICE TABLES
FROM VARIOUS OPERATING SYSTEMS. @{uu}

@{b}Read Ports@{ub}
----------

If this option is selected, then Go Portscan! will attempt to read any data
which is received through an open port and write it to the logfile. By looking at
the output from an open port, it may help you identify further, which program is
running on that port. Any data received from an open port is not displayed in the
listview, but written to the logfile. Reading a port is limited to one read and
a maximum of one line, or 1024 bytes. Whichever comes first.

@{b}Wakeup@{ub}
------

Some open ports may only respond if they receive some data first. Sending a
wakeup sends two carriage returns in an attempt to provoke a response from the
open service. Two carriage returns are considered fairly benign but there is a
small possibility that a badly written remote service will crash, if it doesn't
understand what it's being sent.

@{b}Show Stealthed@{ub}
--------------

Go Portscan! will report any TCP ports which are stealthed. Stealthed ports are
usually the result of the remote machine running a firewall. They differ from
closed ports because they do not return any response at all.

@{b}Show Closed@{ub}
-----------

Go Portscan! will report any TCP ports which are closed. The majority of ports
will be closed.

@{b}Show Trojans@{ub}
------------

If this option is selected, then Go Portscan! will also perform a trojan lookup
on any open ports. PLEASE READ THE SECTION IN THIS GUIDE ABOUT TROJANS!

@{b}Scan Type@{ub}
---------

Selects the type of scan you wish to perform. Go Portscan! supports both TCP
scanning and UDP scanning. Please read the section on @{"Scan Types" Link "Scan Types"} to
learn how these scans work and what they mean.

@{b}Go Scan@{ub}
-------

Starts the port scanning operation. It is worth noting that if the remote
machine you are attempting to scan is offline or running a firewall, the
interface will be locked until the connect() call has timed out.

@endnode

@node "Traceroute_Page" "Traceroute_Page"

                                   TRACEROUTE
                                   ==========

Traceroute is a means of discovering the path taken by network traffic and shows
a list of machines and routers the traffic passes through. Because of the nature
of the way IP works, it doesn't guarantee the route shown is the route taken by all
datagrams but provides a pretty good idea.

@{b}Max Hops@{ub}
--------

Specifies the maximum number of hops (ie routers) the traceroute will do. Traceroute
will terminate at Max Hops or the final destination, whichever comes first.

@{b}Traceroute Type@{ub}
---------------

There are two main ways of performing a traceroute. Go Portscan! supports both.

ICMP:
    Sends ICMP echo requests (pings) with an ever increasing TTL. Routers are
    identified by the reception of TTL exceeded messages. The final destination
    is identified because it usually sends an echo reply message (ping reply).
    This method is generally the default for Windows/DOS implementations of
    traceroute.

UDP:
    Sends UDP datagrams with an ever increasing TTL, to ports which are unlikely
    to be open. Routers are identified by the reception of TTL exceeded messages.
    The final destination is identified because it usually sends a port
    unreachable message. This method is generally the default for UNIX
    implementations of traceroute.

It is quite possible you'll get different routes shown for each type of
traceroute. This is perfectly normal and is usually the result of firewalls or
traffic shaping en route.

@{b}DNS Lookups@{ub}
-----------

If this option is selected Go Portscan! will resolve all IP's of traced hosts
into their respective host names. 

@{b}Traceroute@{ub}
----------

Starts the traceroute


@endnode

@node "PingSweep_Page" "PingSweep_Page"

                                   PINGSWEEP
                                   =========

Ping sweeping is the process of pinging a range of IPs to determine which
machines are active. It has several advantages over using a broadcast ping.
Firstly there is no requirement for machines to respond to a broadcast ping and
scondly routers don't usually forward broadcast packets. Lastly ping sweeping
can cross network segment boundaries. Ping sweeping starts at the hostname or
IP address specified.

@{b}Num Addresses@{ub}
-------------

This is the maximum number of addresses you wish to ping. The start address is
taken from the machine specified in the host field.

@{b}DNS Lookup@{ub}
----------

If this option is selected Go Portscan! will resolve all IP's of pinged hosts
into their respective host names.

@{b}Report Non-Echo Replies@{ub}
-----------------------

If this option is selected then Go Portscan! will report all ICMP messages it
receives. This includes network unreachable messages and host unreachable
messages. These sorts of messages indicate that the host you are trying to
reach, can't be reached and will be sent from a router en route.

@{b}Sweep Type@{ub}
----------

If the type selected is Incremental then ping sweeping will start at the machine
specified in the Host field, increasing the IP address for each consecutive
ping. If the type selected is Decremental then the IP address will decrease for
each consecutive ping

@{b}Ping Sweep@{ub}
----------

Start the Ping Sweep.

@endnode

@node "Other_Page" "Other_Page"

                                     OTHER
                                     =====

@{b}Pings To Send@{ub}
-------------

The maximum number of pings to send.

@{b}ICMP Ping@{ub}
---------

This button will attempt to ping the remote host, with the results being
displayed in the output listview. You can also use the speed slider to control
the speed at which pings are sent. This will help avoid triggering "Ping Flood"
detections on the remote host. Output will be displayed in the following
form:

"ICMP Ping: stig : Sending 48 bytes"
"48 Bytes From xxx.xxx.xxx.xxx : PN=1 : TTL=49 : ENH=15 : TPL=0 (0%): Time=121ms"

This is example output from a machine on the internet. The first line is a basic
description of what is being sent, which will be followed by one or more
"Receieved" lines depending on how many pings you send. The fields are as
follows:

    From xxx.xxx.xxx.xxx
        The IP address of the machine which sent the reply

    PN (Packet Number)
        The unique number assigned to the packet.

    TTL (Time To Live)
        The value of the "Time To Live" parameter of the received packet. This
        describes how long a packet can remain in transit before it is
        discarded. Each time a packet is passed through a router, the TTL field
        is decremented. If a packet arrives at a router with a TTL of 0, it is
        simply thrown away.

    ENH (Estimated Number of Hops)
        This is an estimation of how many routers the received packet had to
        pass through to get to you. 

    TPL (Total Packet Loss)
        This represents the number of packets which were lost on the network.
        There could be many reasons for this, but a common reason may be that
        they are simply being ignored by a remote firewall. The first number
        represents the raw number of packets lost, the second represents the
        number of packets lost as a percentage of the total sent.

    TIME
        The time in ms it took the remote machine to respond including network
        latency.

You can also use broadcast addresses with the Go Portscan! ping. Please note
however that routers are almost always configured to ignore broadcast packets
for security reasons and it is not a requirement for TCP/IP stacks to respond to
broadcasr pings. The default behaviour for Amigas, Macs and UNIX/Linux boxes is
to reply to broadcast pings. The default behaviour for Windows, is to ignore them.

@{b}UDP Ping@{ub}
---------

This version of Ping uses UDP rather than the standard ping which uses ICMP.
Using UDP Ping may allow you to ping a remote host where standard ping may
fail because it is being blocked by a firewall. UDP Ping works by sending a UDP
datagram to a random port on the remote host, which is unlikely to be open.
The remote host normally responds with a Port Unreachble message unless it's firewall
is blocking them.

@{b}Resolve@{ub}
-------

This button attempts to perform a DNS Lookup on the current host. It returns
more than just the IP address of the host, but *all* IP addresses it is known
by, it's official name and also any aliases the host is known by. It also supports
reverse lookups which means you can resolve an IP address into it's hostname and
aliases. The example below is taken from my own network:

Host "nimo"

Official Name: nimo.homenet.lan
IP Address: 192.168.1.4
Alias: files.homenet.lan
Alias: www.homenet.lan

@endnode

@node "Menus" "Menus"

                                     MENUS
                                     =====

PROJECT
=======

@{b}About@{ub} (Amiga + ?)
-----

Opens the about window which contains some basic information about Go Portscan!


@{b}About MUI@{ub}
---------

Opens the MUI About window containing some basic information about MUI and the
classes installed.


@{b}Service Lookup@{ub} (Amiga + S)
--------------

Opens the service lookup window to allow the user to search for an entry in the
service table, either by port number, or keyword. Both case sensitive and case
insensitive searches are supported. Depending on your preference setting, the
service will either be searched in Go Portscan's internal table, or the service
table of your TCP/IP stack.

(See: @{"Service Lookup Window" Link "Service Lookup Window"})


@{b}Bookmarks@{ub} (Amiga + B)
---------

Opens the bookmarks window

(See: @{"Bookmarks Window" Link "Bookmarks Window"})


@{b}Iconify@{ub} (Amiga + I)
-------

Iconifies Go Portscan!


@{b}Quit@{ub} (Amiga + Q)
----

Cleans up and quits Go Portscan!


SETTINGS
========


@{b}MUI Settings@{ub}
------------

Opens the MUI settings window to allow the user to configure MUI settings
specific to Go Portscan!


@{b}Preferences@{ub} (Amiga + P)
-----------

Opens the preferences window for configuring Go Portscan!
(See: @{"Preferences Window" Link "Preferences Window"})

@{b}Save Preferences@{ub}
----------------

Saves the preferences.


@endnode

@node "Service Lookup Window" "Service Lookup Window"

                             SERVICE LOOKUP WINDOW
                             =====================

The service lookup is used to search for entries in the internal
service table, or the service table of your TCP/IP stack.

@{b}Port/Keyword Drop Down Box@{ub}
--------------------------

This allows you to select the type of search (service lookup) you want to do.

Port: Lookup a services by their port numbers. Multiple ports can be specified
using the same syntax as for the port ranges on the main window.

Keyword (case): Lookup services by a keyword. Go Portscan! searches the service
table and displays all services which match the keyword. Go Portscan! will find a
match, even if the keyword forms part of another word. This is a CASE SENSITIVE
search.

Keyword (no case): Lookup services by a keyword: Go Portscan! searches the
service table and displays all services which match the keyword. Go Portscan!
will find a match, even if the keyword forms part of another word. This is a
CASE INSENSITIVE search.

@{b}Lookup@{ub}
------

Performs the search. All matches will be displayed in the output listview.
Please note that all the gadgets will be ghosted until the search is complete.

@endnode

@node "To Do" "To Do"

                                     TO DO
                                     =====

For bug reports and feedback about the program please contact me (ian.chapman@bleach.demon.co.uk).
Some of the things I may add in the future are:

1. External services file
2. Stealth SYN Scans (50% of code is already done but it won't play ball! :-))
3. Stealth FIN Scans (50% of code is already done)
4. Packet sniffing

Feel free to send me any comments or suggestions at the above E-Mail address

@endnode

@node "Trojans" "Trojans"

                                    TROJANS
                                    =======

@{b}What are Port Trojans?@{ub}
----------------------

A port trojan is a piece of software which runs as a malicious service on a
system, often even pretending to be an ordinary service. Their primary intention
is to somehow break the security of the system. This can be achieved in many
ways however some of the common methods employed by trojans, involve harvesting
user passwords and creating back doors such as open shells or open desktops. For
example, a trojan may pretend to be an FTP server, and even behave exactly like
an ordinary FTP server, however it may collect user passwords and log names for
retrieval by the potential hacker.

@{b}Go Portscan! lists trojans which don't run on the Amiga, why?@{ub}
-------------------------------------------------------------

The very nature of Go Portscan! means it is not limited to purely scanning the
ports of the Amiga it is running on. It can scan the ports of ANY machine on the
network, running ANY operating system. Therefore it makes sense to include
information on trojans which run on other operating systems. Not that they
are many (if any) port trojans for the Amiga.

@{b}How do I know/determine if I have a trojan?@{ub}
-------------------------------------------

Often a sign of infection by a port trojan is finding ports open, which
shouldn't be. For example, if you are absolutely certain that you are not
running a webserver and Go Portscan! says port 80 is open, then it's a good sign
that a trojan may be using it. Various techniques may be employed to identify
the cause. Disabling services, one service at a time until the port's closed may
indentify the cause, or telneting to the open port may provide more information
and of cause employing a good virus scanner will always help.

@{b}Go Portscan! says I have a trojan, what should I do?@{ub}
----------------------------------------------------

Go Portscan! is ---NOT--- saying you have a trojan. It simply performs a lookup
of known trojans which run on that port - nothing more.

@endnode

@node "History" "History"

                                    HISTORY
                                    =======

Version 1.1
-----------

ADDED: TCP scans can now be done using blocking or non-blocking sockets. This
       has vastly improved performance on firewalled machines using stealth.
ADDED: Improved UDP portscanning, Go Portscan! can now detect if more UDP ports
       are open
ADDED: Optional reporting of closed ports
ADDED: Optional reporting of stealthed ports
ADDED: Now supports multiple ports for searching the service table. The syntax used is
       the same as that for the port range.
ADDED: Reports the number of matches found when searching the service table.
ADDED: Delay support for traceroutes
ADDED: Delay support for ping sweeps.
ADDED: A couple more services to the service table.
ADDED: The logo now disappears automagically when required allowing a smaller
       window size.
ADDED: Use preferences option
ADDED: Save settings menu
ADDED: The delay slider now has two arrow buttons for finer control of the delay
       option with the mouse, when using a small window.
ADDED: Updated Hungarian locale. (Thanks to Marton Dosa)
ADDED: Newicon V4 dock icon, located in the contrib directory. (Thanks to Luca
       Longone)
ADDED: Go Portscan! will also look for the help file GoPortscan!.guide if it
       cannot find GoPortscan!_en.guide (or your locale equivalent)
       (Thanks to Todd Oberly)
ADDED: Preferences window is now multi-threaded and no longer blocks the main
       window when open.
FIXED: Rare and obscure bug when scanning machines with the readport option
       selected. If the remote service replied, but with a zero length response
       (yes it can happen), then the contents of the previous read port would be
       written to the log instead of an empty string.
FIXED: It is no longer possible to scan ports less than 1 or ports greater than
       65535 by entering spurious portrange syntax. (Thanks to Todd Oberly).
FIXED: If the log file couldn't be found, then Go Portscan! would stream a lot
       of error messages. It now only warns you once. (Thanks to Todd Oberly)
FIXED: When using a delay, Go Portscan! no longer delays unnecessarily at
       the end of an operation. For example, after the last port has been
       scanned. (Thanks to Todd Oberly)
CHANGED: Lots of changes to the GUI, hopefully for the better.
CHANGED: Most of the preferences are now directly handled by MUI, as a
         consequence most gadgets remember their values when the preferences are
         saved.
CHANGED: The look of the logo - smaller, simpler and IMHO looks better.
CHANGED: Bookmarks are only saved if you've actually made any changes to them.
         (Thanks to Todd Oberly)
REMOVED: AREXX support other than the default MUI AREXX commands.
REMOVED: List known services, this is no longer needed as the same can be
         achieved by entering 1-65535 on the service lookup window.

Executable size is about 18k smaller that version 1.0!

Version 1.0
-----------

ADDED: Go Portscan now makes use of BetterString for its string gadgets. This
       means easier cutting & pasting (Amiga+V, Amiga+C) and filename completion
       (Amiga+TAB) etc. (Thanks to Mike Carter)
ADDED: Updated Hungarian locale. (Thanks to Marton Dosa)
FIXED: The Hungarian locale is now correctly installed as 'magyar'.
CHANGED: A few minor changes to how Go Portscan! handles helpers.

Version 0.9
-----------

ADDED: More services to internal service table.
ADDED: UDP support to traceroutes.
ADDED: UDP Pings.
ADDED: Traceroute now reports both hostnames & IPs if the 'DNS Lookup' option
       is selected.
ADDED: Traceroute now reports in greater detail why the remote host could not
       be contacted.
ADDED: Ping now calculates packet loss, both as a percentage and the raw number
       of lost packets.
ADDED: Ping now reports the time taken to receive a reply.
ADDED: Hungarian locale. (Thanks to Marton Dosa).
FIXED: Traceroute is now SIGNIFICANTLY faster. Really stupid bug where a
       'while' loop and been used when a simple 'if' would have sufficed.
FIXED: Traceroute did not report when hosts along the path failed to respond
FIXED: Slight bug in localisation code. An entry in the cycle gadget was using
       the wrong variable on the service lookup window. (Thanks to Marton Dosa)
FIXED: Fixed a few potential memory leaks.
OPTIMISED: TCP and IP datagram checksumming.
CHANGED: Altered layout of ping display to accomodate more fields.

Version 0.8
-----------

ADDED: Localisation support!
ADDED: Traceroute Facility using ICMP echo requests
ADDED: Configurable Max Hops for traceroute
ADDED: Optional DNS lookup for traceroute
ADDED: Ping Sweep Facility, both incremental and decremental sweeps
ADDED: Optional DNS lookup for Ping Sweep
ADDED: Optional non-echo ICMP message reporting for Ping Sweep
ADDED: Ability to specify number of addresses to sweep.
ADDED: More services to internal service table.
ADDED: "Write to Log" button. Dumps the contents of the listview to the logfile
FIXED: The ping facility didn't discard ICMP message intended for other applications
FIXED: Harmless bug where the ping facility would send one more ping than
       specified  (Thanks to Todd Oberly).
FIXED: Harmless bug in port parsing routine. This happened when a range was
       specified with both values above 9999. For example 10000-11000 would get parsed
       as 10000-1100 because the parsing buffer was one character too small.
FIXED: Insignificant bug with two buttons showing the wrong bubble help.
       (Thanks to Marc Bradshaw)
FIXED: Cleaned up the logfile output a bit - such as missing carriage returns.
       (Thanks to Todd Oberly)
FIXED: Stupid bit of legacy code which meant you couldn't select a file for saving the
       log to, directly from the file requester. (Thanks to Todd Oberly)
CHANGED: Massive rework of the interface - again. Mainly because of the new
         things which have been added.
CHANGED: The helper window now has a close gadget (Thanks to Todd Oberly)
CHANGED: Moved the "Mui Settings" and "Preferences" menu items to a new menu
         called "Settings" (Thanks to David Rey)
CHANGED: The bookmark window now closes automatically when you double click on an entry
         (Thanks to Todd Oberly)
CHANGED: Moved cycle-chain code from deprecated MUI V2 style to MUI V3.
OPTIMISED: Optimised core routines saving 340 bytes, increasing scan speeds
           (probably only noticeable on 68000 or 020).
OPTIMISED: Optimised port scanning routine. Needs 16 - 24 bytes less memory per port
           saving up to 1.3MB!!! on a full 1-65535 port scan. A new ockaddr structure
           was being allocated for every port, instead of using the same one.

Version 0.7
-----------

ADDED: Ping Facility including broadcast support.
ADDED: Added ping preference option
ADDED: Resolve Facility. This replaces the "Resolve Window" for a cleaner
       interface to the program.
ADDED: Resolving now supports reverse lookups and also lists *all* IPs the host
       is known by, not just the official one
ADDED: TCP/IP Stack Service Table support. You can now use the service table
       provided by your TCP/IP stack, instead of Go Portscan's internal lookup
       table. This means you can customise your entries.
ADDED: Preference option to choose between internal lookup table, or TCP/IP
       stack service table.
ADDED: Installer script
ADDED: Choice of icon sets (Thanks also to Luca Longone)
ADDED: A bit of eye candy - a Go Portscan! logo.
ADDED: Custom App Icon support
ADDED: TCP scans now attempt to report if the remote machine is offline or
       running a firewall. In cases such as these, it has the effect of causing
       the interface to be "locked" for about 30 secs until the connect() call
       times out. Go Portscan! has *NOT* crashed, it is just an annoying side
       effect of using blocking I/O
ADDED: Two new AREXX commands
FIXED: Minor bug in logfile routine. New UDP scans would be written as new TCP
       scans.
FIXED: Potentially nasty bug where under rare conditions, aborting a udp scan
       could cause it to be illegally thrown into the end of the tcp scan
       routine
FIXED: Not all of the helper fields on the preferences window were in the TAB
       cycle chain. This has now been fixed :)
FIXED: Previously, if you had added entries to the bookmarks list, then quit Go
       Portscan! while the window was open, your bookmarks would not have been
       saved.
FIXED: I thought I'd fixed this for good in 0.6 but still under some
       circumstances your bookmarks would get corrupted. I really hope I've
       fixed this now :-)
OPTIMISED: Completely re-written the error handling routines to use exceptions.
           This makes the source code much cleaner and it should handle low memory
           situations much better.
CHANGED: Go Portscan! now requires your TCP/IP stack to be running before it
         starts up. This allowed a lot of tidying up to the code

Version 0.6
-----------

ADDED: UDP scanning. The UDP scanning code is somewhat experimental because of
       UDP being an unreliable protocol and is liable to significant changes.
ADDED: AREXX support!! 20 commands added
ADDED: One AREXX script
ADDED: Scantype option to perform (TCP Only, UDP Only, TCP then UDP, UDP then
       TCP)
ADDED: A few changes to how the GUI works, these are barely noticeable but tidy
       things up a bit more.
ADDED: There are now two binary versions. One for 68000 based machines (and
       above) and a version with slight optimisations for 68020 based machines
       and above.
FIXED: Previously a harmless bug existed in the parsing of the ports to scan
       routine which could make Go Portscan! scan port 0 several times at the
       end of a scan. The parsing routine has now been completely rewritten
       and should solve this. It should also use slightly less memory.
FIXED: Memory leak which sometimes caused enforcer hits when performing serveral
       scans. 
FIXED: A nasty bug concerning bookmarks which could end up screwing up your
       bookmarks, deleting them altogether or causing enforcer hits.
OPTIMISED: Several routines which handle the MUI interface have been optimised
           reducing source code size.
OPTIMISED: Routines to handle the logfile have been altered, reducing the size
           of the source code, although you may notice more Open(), Close()
           operations if you run SnoopDOS

Version 0.5.1
-------------

-Quick Fix version. Some dummy code was accidentally left in the program which
tried to open locale.library V44+ even though Go Portscan! does not require it
(yet). The problem did not effect users of OS3.5 and OS3.9. Thanks to all the
users who pointed this one out :)

Version 0.5
-----------

ADDED: Speed Slider to control the speed of scans.
ADDED: Resolve Host option. Resolves hostname to IP, official name and any aliases.
ADDED: the ability to use more helpers instead of just telnet
ADDED: yet more trojans
ADDED: Pressing HELP on any Go Portscan! window will open an AmigaGuide file about it.
       This requires GoPortscan!.guide to be in the same directory as Go Portscan!
       (PROGDIR:)
FIXED: 'locahost' problem. Now says 'localhost' by default
       (Thanks to all the people who pointed this one out)
FIXED: enforcer hit when adding a custom range, just after closing the bookmarks
       window. Problem was caused by attempting to close the same file twice.
       (Thanks to Todd A. Oberly)

Version 0.4
-----------

ADDED: More multi-threaded. For example the bookmarks and service lookup window can be
       used simultaneously.
ADDED: busy bar which appears during lengthy operations.
        (Requires busy.mcc & busy.mcp)
ADDED: "Show Trojans" option
ADDED: "Show Trojans" option to preferences.
ADDED: file requesters for the log file.
       (Requires reqtools.library)
ADDED: user-definable ranges
ADDED: more services & trojans.


Version 0.3
-----------

ADDED: menus - Preferences, Bookmarks
ADDED: Preferences - Go Portscans! configuration can now be saved
ADDED: Booksmarks - Bookmark hosts for scanning
ADDED: Bookmarks are automatically sorted in alphabetical order
ADDED: Open Bookmarks Button
ADDED: Massive cosmetic changes to the GUI. Changed the layout of the gadgets from a
       left to right layout, to a top-down layout.
ADDED: Double Clicking in the listview will now automatically telnet to that host on that port
ADDED  'Default' option to the portrange cycle gadget
ADDED: More services and trojans added
ADDED: Minor optimisations of GUI code.
CHANGED: Changed it so that when Wakeup is selected, read ports is automatically
         selected. (Wakeup requires read ports to be selected)
CHANGED: Changed it so that when Read Ports is deselected, wakeup is automatically
         deselected.
CHANGED: Changed the way trojans are listed


Version 0.2
-----------

ADDED: menus - About, MUI About, MUI Settings, Service Lookup, Iconify, Quit
ADDED: service lookup feature. Manual lookups can be performed by port number or
       a keyword search. Both case sensitive and insensitive searches can be performed.
ADDED: about window
ADDED: tab cycle chains.
ADDED: lots of new services to the service table.
ADDED: Minor changes to the GUI layout (some buttons moved, button ghosting)
ADDED: rewrite of the source code, in preparation for localisation in a future
       version as well as tidying up some routines.
ADDED: changes to various texts such as bubble help.
ADDED: Completely re-written documentation. Now in Amiga Guide format.
ADDED: Online Help.
FIXED: Minor bug fix in the layout of the logfile.

Version 0.1
-----------

Initial Release.

@endnode

@node "Preferences Window" "Preferences Window"

                               PREFERENCES WINDOW
                               ==================

@{b}Telnet@{ub}
------

The telnet helper program which is used when selecting telnet from the
@{"Helper Window" Link "Helper Window"}. This should include the full path and name of the telnet
client as well as any command line parameters you may want to use. You should
also specify %h where you want the hostname or IP to appear on the command line
and %p where you want the port number to appear. For example:

        miami:miamitelnet %h %p

@{b}FTP@{ub}
---

The FTP helper program which is used when selecting FTP from the @{"Helper Window" Link "Helper Window"}.
This should include the full path and name of the FTP client as well
as any command line parameters you may want to use. You should also specify %h
where you want the hostname or IP to appear on the command line and %p where you
want the port number to appear. For example:

        aweb3:aweb-ii URL=ftp://%h:%p

@{b}Web@{ub}
---

The web/http helper program which is used when selecting web from the @{"Helper Window" Link "Helper Window"}.
This should include the full path and name of the web browser as well
as any command line parameters you may want to use. You should also specify %h
where you want the hostname or IP to appear on the command line and %p where you
want the port number to appear. For example:

        aweb3:aweb-ii URL=http://%h %p

@{b}Other@{ub}
-----

The user may specify any additional client program that they want used as a
helper when selecting other from the @{"Helper Window" Link "Helper Window"}. This should
include the full name and path of the client including any command line
parameters which may be required. You should also specify %h where you want the
hostname or IP to appear on the command line and %p where you want the port
number to appear.

@{b}Timeout@{ub}
-------

This option is only used if you have 'Read Ports' selected. It is the length of
time in seconds Go Portscan! should wait for an open port to respond before
timing out. You are advised not to set this value too high because the interface
will be locked until a response is received or the timeout is reached. It is
recommended that you do not set this higher than 2 seconds unless you have good
reason to do so.

@{b}Log@{ub}
---

The filename and full path of the log file. The results from port scans are
automatically written to the logfile. Other results can be written to the
logfile by clicking on the disk icon. You can of course use any valid AmigaDOS
pseudo device. For example:

NIL:     Don't write to a log file
SER:     Send logfile output to the serial port
PAR:     Send logfile output to the parallel port
CONSOLE: Send logfile output to the current console (if applicable)

@{b}Internal Service Table@{ub}
----------------------

Choose whether Go Portscan! should use it's internal service table, which is
very large and extensive, or the service table of your TCP/IP stack which can be
configured to suit your needs.

@{b}Non-Blocking Sockets@{ub}
--------------------

Tells Go Portscan! whether non-blocking sockets should be used for portscans.
Non-blocking sockets should be used unless you have good reason not to use them,
as they have the advantage of not locking the interface for extended periods of
time, if the remote host is using a stealthing firewall. The only time when
blocking sockets should be considered is if your network latency is over two
seconds which may lead to reduced accuracy with non-blocking sockets. In any
case, if you network latency exceeds two seconds, you have a really BAD
connection.

@{b}Save@{ub}
----

Saves the preferences permanently.

@{b}Use@{ub}
---

Saves the preferences, but they are lost after a reboot.

@{b}Cancel@{ub}
------

Discards any preference changes.

@endnode

@node "Bookmarks Window" "Bookmarks Window"

                                BOOKMARKS WINDOW
                                ================

The bookmarks window is for storing hostnames or IP addresses of
machines which you scan on a regular basis. You can select which
machine you wish to scan by double clicking on an entry.


@{b}Bookmarks Listview@{ub}
------------------

Displays a list of the current bookmarks. Double clicking on an entry will
insert it into the Host box of the main window. Host entries are automatically
sorted into alphabetical order.

@{b}Add@{ub}
---

Adds the host name or IP entered into the string box into the bookmark list.

@{b}Delete@{ub}
------

Deletes the selected entry from the bookmarks

@{u}NOTE: Bookmarks are automatically saved when the bookmark window is closed,
or when Go Portscan! is quit@{uu}

@endnode

@node "Services Table" "Services Table"

                                 SERVICES TABLE
                                 ==============

With Go Portscan! you have the choice of using it's internal service table,
which is quite extensive and large, or using the service table provided by your
TCP/IP stack which can be customised to suit your needs.

When Go Portscan! performs a lookup the service table is transversed and when a
match is found it displays it in the listview. The format of an entry looks like:

@{b}80@{ub} TCP   http www www-http : World Wide Web HTTP Server ; @{b}[TROJANS=Executor]@{ub}

When multiple services or trojans exist on a particular port, then they are
separated by a semi-colon (;). Each service is split into two parts which are
its nicname (the name of the service in any service table) and a description of
the service, which are colon separated (:). If multiple nicnames exists for a
service then they are separated by spaces. So using the above service entry as
an example, this means:

There are two services which are run on port 80, these are:
        http www www-http : World Wide Web HTTP Server
        @{b}[TROJANS=Executor]@{ub}

The first service has more than one nicname, these are:
        http
        www
        www-http

The description for the first service is:
        World Wide Web HTTP Server

The description for the second service is:
        @{b}Executor [TROJAN]@{ub}

@endnode

@node "Scan Types" "Scan Types"

                                   SCAN TYPES
                                   ==========

TCP SCANS
=========

TCP is a connection orientated transport protocol and is probably used by the
majority of internet applications. It simulates a stream which in other words
means it guarantees the application that any data sent and received will arrive
at the destination and in the correct order.

Go Portscan! can determine whether TCP ports are Open, Closed, or Stealthed. It
does this by attempting to CONNECT to each TCP port. In simple terms, if the
remote port is open, it receives an open response, if it is closed, it receives
a closed response and if it is stealthed, then no response is sent at all.

UDP SCANS
=========

UDP is probably the second most common transport protocol in use. It is a
connectionless orientated transport protocol, which unlike TCP means that it
does NOT guarantee the application that any data sent and received will arrive
at the destination and if it does, it may arrive in the wrong order. It is
usually up to the application to implement its own error checking. At first it
may seem pointless using UDP instead of TCP but there are many advantages which
won't be discussed here.

UDP port scans are significantly more complicated than TCP scans, and also have
limits with regards to what we can tell. This is inherent in the way UDP works.

Go Portscan! can determine whether UDP ports are Open, Closed, or what I call
"Probably Open" (indicated by (!!) when doing UDP scans). It does this by
sending data to each UDP port. Note that UDP does not establish connections
in the sense that TCP does. If the remote UDP port is closed, then
Go Portscan receives a port unreachable ICMP message. If the port is open, then
Go Portscan! receives a series of one or more UDP packets. The third case is
when Go Portscan receives no response at all. This usually means one of three
things. Firstly, the port may be open but the service is not responding to the
sent message. Secondly, because UDP does not guarantee that any data sent will
reach it's destination, data loss may have ocurred. Lastly, the UDP port may
be stealthed in which case no response will be sent. Data loss is relatively
uncommon, but the user can tell the difference between stealthed UDP ports
and UDP ports that are open, by the number of UDP (!!) reported by Go Portscan!.
If almost every UDP port results in a UDP (!!) message then the remote machine
is almost certainly running a stealthing firewall. If just a few UDP ports result
in UDP (!!) then they are almost certainly open.

@endnode

@node "Helper Window" "Helper Window"

                                 HELPER WINDOW
                                 =============

The helper window appears when you double click on an entry in the listview of
the main window. Choose the helper program you want to use to attempt to connect
to the host on the specific port.

@endnode

@node "Arexx" "Arexx"

                                     AREXX
                                     =====
@{b}NOTE!@{ub}

AREXX support has now been removed (since V1.1), other than the default AREXX
commands which every MUI application has. AREXX support was removed because it
was lagging behind and nobody seemed to be using it anyway.

The name of the AREXX port for the first copy of Go Porscan! running is
'GOPORTSCAN.1', the second copy would be 'GOPORTSCAN.2' etc.


@{b}Standard MUI AREXX Commands@{ub}
---------------------------

QUIT            - Quit Go Portscan!
HIDE            - Iconify Go Portscan!
SHOW            - Uniconify Go Portscan!
INFO ITEM/A     - Return information about Go Portscan!
HELP FILE/A     - List available AREXX commands to the file.
@endnode



@node "Contact" "Contact"

                            CONTACT, BUGS & TESTING
                            =======================

Feel free to contact me regarding Go Portscan! with any questions you may have,
request for improvements or bug reports at ian.chapman@bleach.demon.co.uk

Go Portscan! has been primarily tested under the following two setups:

Amiga 4000T                     Towered A4000
060@50Mhz                       060@50Mhz
154MB RAM                       146MB RAM
Ariadne II                      X-Surf
Cybervision 64/3D               Picasso IV
Cybervision Scandoubler         Picasso IV Scandoubler
GVP Impact Series II SCSI       Paloma IV
Hypercom I/O Card               BSC MultiFace III
Buddha IDE Card                 GVP Impact Series II SCSI
OS 3.5                          OS 3.5
MiamiDX TCP/IP Stack            MiamiDX TCP/IP Stack

A large amount of testing has been done on my own network which also consists of
machines running Linux (X86), Solaris (Sparc), Windows 2000 and AmigaOS.
Testing has been done where possible with machines on the internet. If
you find any bugs then please send the details to me at the above address,
including a good description of the bug, and if applicable, details of any
enforcer hits and your system setup.

Go Portscan! has been almost exclusively tested with MiamiDX, so I'm very keen
to know how well it runs under other stacks. So if you're running Genesis,
AmiTCP, Termite TCP or Inet 255 and it does or doesn't work properly, let me
know.

@endnode

